/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GTranslate.java
 *
 * Created on Oct 6, 2010, 8:51:30 AM
 */
package gtranslate;

import com.google.api.translate.Language;
import com.google.api.translate.Translate;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.text.DecimalFormat;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Johnny
 */
public class GTranslate extends javax.swing.JFrame {

    /** Creates new form GTranslate */
    public GTranslate() {
        initComponents();
        for (int i = 0; i < set.length; i++) {
            LangSel.addItem(set[i].name());
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        option = new javax.swing.ButtonGroup();
        prog = new javax.swing.JProgressBar();
        btnStart = new javax.swing.JButton();
        lang = new javax.swing.JLabel();
        procent = new javax.swing.JLabel();
        SliderLines = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lines = new javax.swing.JLabel();
        translateTo = new javax.swing.JCheckBox();
        LangSel = new javax.swing.JComboBox();
        langByCode = new javax.swing.JCheckBox();
        langCode = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GTranslate");

        prog.setToolTipText("progress");

        btnStart.setFont(new java.awt.Font("Tahoma", 0, 10));
        btnStart.setText("Start");
        btnStart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnStartMouseReleased(evt);
            }
        });

        lang.setText("No translation");

        procent.setText("0%");

        SliderLines.setMajorTickSpacing(1);
        SliderLines.setMaximum(20);
        SliderLines.setValue(1);
        SliderLines.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                SliderLinesMouseReleased(evt);
            }
        });

        jLabel1.setText("Nr of Lines");
        jLabel1.setToolTipText("Number of lines to parse at a time");

        lines.setText("1");

        option.add(translateTo);
        translateTo.setText("Translate To:");
        translateTo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                translateToItemStateChanged(evt);
            }
        });

        LangSel.setEnabled(false);

        option.add(langByCode);
        langByCode.setText("By code");
        langByCode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                langByCodeItemStateChanged(evt);
            }
        });

        langCode.setText("Language Code");
        langCode.setEnabled(false);

        option.add(jCheckBox1);
        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Translate to ALL");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(procent)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(prog, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(btnStart))
                            .addComponent(lang)))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SliderLines, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lines)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(langByCode)
                                .addGap(35, 35, 35)
                                .addComponent(langCode))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(translateTo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LangSel, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jCheckBox1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(prog, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(procent, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lang))
                            .addComponent(btnStart))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lines, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE))
                                .addGap(8, 8, 8))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SliderLines, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(translateTo)
                            .addComponent(LangSel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(langByCode)
                            .addComponent(langCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addGap(69, 69, 69))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStartMouseReleased
        new Thread(new Runnable() {

            public void run() {
                try {
                    if (translateTo.isSelected()) {
                        translateToLang(set[LangSel.getSelectedIndex()]);
                    } else if (langByCode.isSelected()) {
                        translateToLangbyCode(langCode.getText());
                    } else {
                        translateAll();
                    }
                } catch (Exception ex) {
                    Logger.getLogger(GTranslate.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }).start();
    }//GEN-LAST:event_btnStartMouseReleased

    private void SliderLinesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SliderLinesMouseReleased
        nr_lines = SliderLines.getValue() * 5;
        lines.setText(nr_lines + "");
    }//GEN-LAST:event_SliderLinesMouseReleased

    private void translateToItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_translateToItemStateChanged
        if (translateTo.isSelected()) {
            LangSel.setEnabled(true);
        } else {
            LangSel.setEnabled(false);
        }
    }//GEN-LAST:event_translateToItemStateChanged

    private void langByCodeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_langByCodeItemStateChanged
        if (langByCode.isSelected()) {
            langCode.setEnabled(true);
        } else {
            langCode.setEnabled(false);
        }
    }//GEN-LAST:event_langByCodeItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new GTranslate().setVisible(true);
            }
        });
    }

    public void translateToLangbyCode(String code) throws Exception {
        Language l = Language.fromString(code);
        int linecount = 1;
        System.out.println("Translating to : " + l.name());
        lang.setText("Translating to : " + l.name());
        File f = new File(input_file);
        File out = new File(l.name() + ".txt");

        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(out), "UTF8"));



        int total = countLines(input_file);
        while (br.ready()) {
            try {
                Translate.setHttpReferrer(refs[new Random().nextInt(1)]);
                //5 lines at a time
                String[] linesBuffer = new String[nr_lines];
                for (int j = 0; j < linesBuffer.length; j++) {
                    if (br.ready()) {
                        linesBuffer[j] = br.readLine();
                    } else {
                        linesBuffer[j] = "end";
                    }
                }
                String[] translatedText = Translate.execute(linesBuffer, Language.ENGLISH, l);
                for (int j = 0; j < translatedText.length; j++) {
                    String string = translatedText[j];
                    if (linecount != 1) {
                        bw.newLine();
                    }
                    bw.write(string);
                    linecount++;
                    if (linecount > total) {
                        break;
                    }

                    DecimalFormat df = new DecimalFormat("##.##");
                    double proc = (((linecount * 1.0) / (total * 1.0)) * 100);
                    procent.setText(df.format(proc) + "%");
                    prog.setValue((int) proc);
                }
                Thread.sleep(100);
                //   if(linecount==10000) Thread.currentThread().sleep(350);
            } catch (Exception exception) {
                JOptionPane.showMessageDialog(this, exception.getMessage());
                bw.close();
                break;
            }
        }
        bw.close();
    }

    public void translateToLang(Language l) throws Exception {

        int linecount = 1;
        lang.setText("Translating to : " + l.name());
        File f = new File(input_file);
        File out = new File(l.name() + ".txt");

        FileReader fr = new FileReader(f);
        BufferedReader br = new BufferedReader(fr);

        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(out), "UTF8"));



        int total = countLines(input_file);
        while (br.ready()) {
            try {
                Translate.setHttpReferrer(refs[new Random().nextInt(1)]);
                //5 lines at a time
                String[] linesBuffer = new String[nr_lines];
                for (int j = 0; j < linesBuffer.length; j++) {
                    if (br.ready()) {
                        linesBuffer[j] = br.readLine();
                    } else {
                        linesBuffer[j] = "end";
                    }
                }
                String[] translatedText = Translate.execute(linesBuffer, Language.ENGLISH, l);
                for (int j = 0; j < translatedText.length; j++) {
                    String string = translatedText[j];
                    if (linecount != 1) {
                        bw.newLine();
                    }
                    bw.write(string);
                    linecount++;
                    if (linecount > total) {
                        break;
                    }

                    DecimalFormat df = new DecimalFormat("##.##");
                    double proc = (((linecount * 1.0) / (total * 1.0)) * 100);
                    procent.setText(df.format(proc) + "%");
                    prog.setValue((int) proc);
                }
                Thread.sleep(100);
                //   if(linecount==10000) Thread.currentThread().sleep(350);
            } catch (Exception exception) {
                JOptionPane.showMessageDialog(this, exception.getMessage());
                bw.close();
                break;
            }
        }
        bw.close();
    }

    public void translateAll() throws Exception {
        input_file = "EN.txt";
        for (int i = 0; i < set.length; i++) {
            if (!set[i].toString().equals("en")) {
                int linecount = 1;
                System.out.println("Translating to : " + set[i].name());
                lang.setText("Translating to : " + set[i].name());
                File f = new File(input_file);
                File out = new File(set[i].name() + ".txt");

                FileReader fr = new FileReader(f);
                BufferedReader br = new BufferedReader(fr);


                BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(out), "UTF8"));
                int total = countLines(input_file);
                while (linecount <= total) {
                    try {
                        Translate.setHttpReferrer(refs[new Random().nextInt(1)]);
                        //5 lines at a time
                        String[] linesBuffer = new String[nr_lines];
                        for (int j = 0; j < linesBuffer.length; j++) {
                            if (br.ready()) {
                                linesBuffer[j] = br.readLine();
                            } else {
                                linesBuffer[j] = "end";
                            }
                        }
                        String[] translatedText = Translate.execute(linesBuffer, Language.ENGLISH, set[i]);
                        for (int j = 0; j < translatedText.length; j++) {
                            String string = translatedText[j];
                            if (linecount != 1) {
                                bw.newLine();
                            }
                            bw.write(string);
                            linecount++;
                            if (linecount > total) {
                                break;
                            }

                            DecimalFormat df = new DecimalFormat("##.##");
                            double proc = (((linecount * 1.0) / (total * 1.0)) * 100);
                            procent.setText(df.format(proc) + "%");
                            prog.setValue((int) proc);
                        }
                        Thread.sleep(100);
                        //   if(linecount==10000) Thread.currentThread().sleep(350);
                    } catch (Exception exception) {
                        JOptionPane.showMessageDialog(this, exception.getMessage());
                        bw.close();
                        break;
                    }
                }
                bw.close();
                //5min pause


            }
            Thread.sleep(5000);
            System.out.println("Job done");
        }
    }

    public int countLines(String filename) throws IOException {
        InputStream is = new BufferedInputStream(new FileInputStream(filename));
        byte[] c = new byte[1024];
        int count = 0;
        int readChars = 0;
        while ((readChars = is.read(c)) != -1) {
            for (int i = 0; i < readChars; ++i) {
                if (c[i] == '\n') {
                    ++count;
                }
            }
        }
        return count;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox LangSel;
    private javax.swing.JSlider SliderLines;
    private javax.swing.JButton btnStart;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lang;
    private javax.swing.JCheckBox langByCode;
    private javax.swing.JTextField langCode;
    private javax.swing.JLabel lines;
    private javax.swing.ButtonGroup option;
    private javax.swing.JLabel procent;
    private javax.swing.JProgressBar prog;
    private javax.swing.JCheckBox translateTo;
    // End of variables declaration//GEN-END:variables
    private static Language[] set = Language.values();
    private int nr_lines = 1;
    private String input_file = "EN.txt";
    private String[] refs = {"proiect.frevar.com",
        "google.com"
    };
}
